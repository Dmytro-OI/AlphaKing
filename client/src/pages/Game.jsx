import React, { useState, useEffect } from 'react';
import { useGame } from '../context/GameContext';
import { socket } from '../socket';
import { useSocketEvents } from '../hooks/useSocketEvents';
import { useTimer } from '../hooks/useTimer';
import Lobby from '../components/Lobby';
import { toast } from 'react-toastify';

function Game() {
  const {
    username,
    lobbyCode,
    setLobbyCode,
    chunk,
    round,
    currentPlayerId,
    isGameStarted,
    setIsGameStarted,
    hp,
    setHp,
    setChunk,
    setRound,
    setCurrentPlayerId
  } = useGame();

  const [players, setPlayers] = useState([]);
  const [mySocketId, setMySocketId] = useState('');
  const [word, setWord] = useState('');

  const secondsLeft = useTimer(currentPlayerId === mySocketId);

  // DEBUG
  console.log('üß† [useGame]', {
    username,
    lobbyCode,
    chunk,
    round,
    currentPlayerId,
    isGameStarted,
    hp
  });

  useSocketEvents();

  useEffect(() => {
    if (socket.connected) {
      setMySocketId(socket.id);
      console.log(`‚úÖ Socket connected: ${socket.id}`);
    } else {
      socket.on('connect', () => {
        setMySocketId(socket.id);
        console.log(`üîå Socket connected later: ${socket.id}`);
      });
    }
  }, []);

  useEffect(() => {
    socket.on('lobbyUpdate', (lobby) => {
      console.log('üì° [lobbyUpdate]', lobby);
      setPlayers(lobby.players || []);
      if (lobby.code) setLobbyCode(lobby.code);
    });

    socket.on('gameStarted', () => {
      console.log('üéÆ [Game Started]');
      setIsGameStarted(true);
      setHp(3);
    });

    socket.on('playerDamaged', ({ id, hp }) => {
      console.log('‚ö†Ô∏è [playerDamaged]', id, hp);
      if (id === socket.id) {
        setHp(hp);
        toast.warn(`üíî -1 HP! –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${hp}`);
      }
    });

    socket.on('playerEliminated', (id) => {
      console.log('‚ò†Ô∏è [playerEliminated]', id);
      if (id === socket.id) {
        toast.error('üíÄ –¢–∏ –≤–∏–±—É–≤!');
      } else {
        toast.warn('üîª –ì—Ä–∞–≤–µ—Ü—å –≤–∏–±—É–≤!');
      }
    });

    socket.on('gameOver', (winner) => {
      console.log('üèÅ [Game Over]', winner);
      if (!winner) toast.info('–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –≤—Å—ñ –≤–∏–±—É–ª–∏!');
      else if (winner.id === socket.id) toast.success('üëë –¢–∏ –ø–µ—Ä–µ–º—ñ–≥!');
      else toast.info(`üëë –ü–µ—Ä–µ–º—ñ–≥: ${winner.username}`);

      // Reset state
      localStorage.removeItem('lobbyCode');
      localStorage.removeItem('username');
      setLobbyCode('');
      setIsGameStarted(false);
      setChunk('');
      setRound(0);
      setCurrentPlayerId('');
      setHp(3);

      // reconnect
      socket.disconnect();
      socket.connect();
    });

    return () => {
      socket.off('lobbyUpdate');
      socket.off('gameStarted');
      socket.off('playerDamaged');
      socket.off('playerEliminated');
      socket.off('gameOver');
    };
  }, []);

  const submit = () => {
    if (!word.trim()) return;
    console.log(`üì§ [submitWord] "${word}"`);
    socket.emit('submitWord', { lobbyCode, word });
    setWord('');
  };

  const startGame = () => {
    console.log('üöÄ [startGame]');
    socket.emit('startGame', lobbyCode);
  };

  const isHost = players.length > 0 && players[0].id === mySocketId;

  if (!isGameStarted) {
    return (
      <div className="container">
        <h2>–õ–æ–±—ñ: <span>{lobbyCode || '...'}</span></h2>
        <Lobby players={players} isHost={isHost} onStart={startGame} />
        <p>–û—á—ñ–∫—É—î–º–æ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏...</p>
      </div>
    );
  }

  const isMyTurn = currentPlayerId === mySocketId;

  return (
    <div className="container">
      <h2>–†–∞—É–Ω–¥ {round}</h2>
      <h3>–°–∫–ª–∞–¥: <span style={{ color: '#4af' }}>{chunk}</span></h3>
      <h4>‚ù§Ô∏è –¢–≤–æ—î HP: {hp}</h4>
      <p>‚è±Ô∏è –ß–∞—Å: {secondsLeft} —Å–µ–∫.</p>
      <h4>
        {isMyTurn
          ? 'üü¢ –¢–≤—ñ–π —Ö—ñ–¥ ‚Äî –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ:'
          : 'üî¥ –•—ñ–¥ —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è'}
      </h4>

    {isMyTurn && (
    <>
        {console.log('‚å®Ô∏è Input rendered for:', username, 'Socket:', mySocketId)}
        <input
        value={word}
        onChange={(e) => {
            setWord(e.target.value);
            console.log('‚úèÔ∏è –í–≤–µ–¥–µ–Ω–æ:', e.target.value);
        }}
        placeholder="–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ"
        onKeyDown={(e) => {
            if (e.key === 'Enter') {
            console.log('‚èé Enter –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ ‚Äî —Å–ª–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è:', word);
            submit();
            }
        }}
        />
        <button
        onClick={() => {
            console.log('üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É:', word);
            submit();
        }}
        >
        –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
        </button>
    </>
    )}

    </div>
  );
}

export default Game;
